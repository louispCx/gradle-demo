project.ext {
	warBaseName = 'Coverage'
	warVersion = ''
}

buildscript {
	ext {
		springBootVersion = '2.5.0'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.0")
		//classpath("org.hidetake:gradle-ssh-plugin:2.9.0")	
	}
}


apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'java-library'

startScripts.enabled = false



war {
	baseName = project.warBaseName
	version = project.warVersion
	enabled = true
}

bootWar {
    manifest {
        attributes  'Title': 'Coverage', 'Start-Class': 'com.testing.CoverageApplication'
    }
    //launchScript()
}


war {
	baseName = project.warBaseName
	version = project.warVersion
	enabled = true
}

group = 'com.testing'
//version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	//mavenCentral()
	jcenter()
}

configurations {
	providedRuntime
	jacocoAnt
	jacocoRuntime
}

dependencies {
//                implementation 'org.webjars.npm:coa:2.0.2'
//		implementation 'com.github.codingandcoding:mail-watcher-plugin:1.16'
//		implementation 'com.github.codingandcoding:maven-compiler-plugin:3.9.0'
//		implementation 'com.github.codingandcoding:servlet-api:3.2.0' 

	implementation ('com.oracle:ojdbc6:11.2.0.3')
	//compile group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.6'
    //compile group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.6'
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
    }
    /* Spring Bach */
    implementation('org.springframework.boot:spring-boot-starter-batch')
 //   implementation('org.springframework.boot:spring-boot-starter-quartz')
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz', version: '2.5.0'
    /* PostgreSQL */
	runtimeOnly('org.postgresql:postgresql:42.2.19')
	
	/* Devtools */
	runtimeOnly("org.springframework.boot:spring-boot-devtools")

	implementation('org.apache.tomcat.embed:tomcat-embed-jasper')
	implementation('javax.servlet:jstl:1.2')
	implementation('org.jsoup:jsoup:1.11.3')

	implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
	
	/* java annotation library */
	compileOnly('org.projectlombok:lombok:1.18.18')
	annotationProcessor 'org.projectlombok:lombok'
	
	/* When using @ConfigurationProperties it is recommended to add 'spring-boot-configuration-processor' to your classpath to generate configuration metadata */
	implementation('org.springframework.boot:spring-boot-configuration-processor')
	
	/* Jacoco */
	//implementation('org.jacoco:org.jacoco.ant:0.8.6')
	
	/* Common-io */
	implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
	
	
	/* swagger */
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'
	
	/* STAF */
    implementation files('libs/jacocoant.jar')
    implementation files('libs/jacocoagent.jar')
	
  
    /* Apache POI */
    implementation('org.apache.poi:poi-scratchpad:3.15')
    implementation('org.apache.poi:poi-excelant:3.15')
    implementation('org.apache.poi:poi-ooxml:3.15')
    implementation('org.apache.poi:poi-ooxml-schemas:3.15')
    
    /* JSONParser */
  	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    /* Spring Security */
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.5.0'
    implementation group: 'org.springframework.security', name: 'spring-security-taglibs', version: '5.5.0'
    
    /*Sonar*/
    //compile 'org.codehaus.sonar:sonar-ws-client'
    
    /* TEST */
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.batch:spring-batch-test')
	

	//tymeleaf
    //implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

}

test {
    useJUnitPlatform()
}

task localDeploy (dependsOn: war) {
	doLast {
		copy {
			def warFile = project.warBaseName + ".war"
			from "build/libs/${warFile}"
			into "C:/STS-DEV/server/apache-tomcat-8.5.29/webapps"
		}
	}
}

task copyToLib(type: Copy) {
	into "$buildDir/output/lib"
    //from configurations.implementation
    from configurations.runtimeClasspath

}
build.dependsOn(copyToLib)
task instrument(dependsOn: ['classes']) {
	ext.outputDir = buildDir.path + '/reports/classes-instrumented'
		doLast {
			ant.taskdef(name: 'instrument',
			classname: 'org.jacoco.ant.InstrumentTask',
			classpath: configurations.jacocoAnt.asPath)
			ant.instrument(destdir: outputDir) {
				fileset(dir: sourceSets.main.output.classesDir)
			}
		}
}

task local_deploy {
	dependsOn 'clean'
	dependsOn 'war'
	dependsOn 'localDeploy'
	tasks.findByName('war').mustRunAfter 'clean'
	tasks.findByName('localDeploy').mustRunAfter 'war'
}
